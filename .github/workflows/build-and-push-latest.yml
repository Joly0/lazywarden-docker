name: Build and Publish Docker Image

# Define when the workflow should run
on:
  # This workflow is triggered when the 'Detect Changes and Update Commit Hash' workflow completes successfully
  workflow_run:
    workflows: ["Detect Changes and Update Commit Hash"]
    types:
      - completed

# Define the jobs to be executed in this workflow
jobs:
  build:
    runs-on: ubuntu-latest  # Specify the OS for the runner
    permissions:
      contents: read  # Grant read permissions to the repository content
      packages: write # Allow writing to the GitHub package registry
    steps:
    # Step 1: Check out the repository containing the workflow file
    - name: Checkout the workflow repository
      uses: actions/checkout@v4

    # Step 2: Clone the target repository and get the latest commit hash
    - name: Clone target repository
      run: |
        # Clone the target repository to the runner
        git clone https://github.com/${{ vars.REPO_PROFILE }}/${{ vars.REPO_NAME }}.git
        cd ${{ vars.REPO_NAME }}
        # Get the latest commit hash of the target repository
        latest_commit=$(git rev-parse HEAD)
        # Save the commit hash as an environment variable
        echo "LATEST_COMMIT=${latest_commit}" >> $GITHUB_ENV

    # Step 3: Set up Docker Buildx for multi-platform builds
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Step 4: Log in to GitHub Container Registry
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io  # Specify GitHub Container Registry as the target registry
        username: ${{ github.actor }}  # Use the GitHub actor as the username
        password: ${{ secrets.GITHUB_TOKEN }}  # Use the GitHub token for authentication

    # Step 5: Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKER_HUB_USERNAME }}  # Use the Docker Hub username stored in secrets
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}  # Use the Docker Hub access token stored in secrets

    # Step 6: Build and push Docker image
    - name: Build and push Docker image
      run: |
        cd ${{ vars.REPO_NAME }}  # Navigate to the cloned repository
        # Convert repository owner to lowercase (GitHub package names must be lowercase)
        LOWERCASE_REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        
        # Build the Docker image using the Dockerfile in the repository
        docker build -t ghcr.io/$LOWERCASE_REPO_OWNER/${{ vars.REPO_NAME }}:latest . -f Dockerfile
        
        # Tag the image for Docker Hub
        docker tag ghcr.io/$LOWERCASE_REPO_OWNER/${{ vars.REPO_NAME }}:latest ${{ vars.DOCKER_HUB_USERNAME }}/${{ vars.REPO_NAME }}:latest
        
        # Push the Docker image to GitHub Container Registry
        docker push ghcr.io/$LOWERCASE_REPO_OWNER/${{ vars.REPO_NAME }}:latest
        # Push the Docker image to Docker Hub
        docker push ${{ vars.DOCKER_HUB_USERNAME }}/${{ vars.REPO_NAME }}:latest

    # Step 7: Clean up the workspace
    - name: Clean up
      run: |
        rm -rf ${{ vars.REPO_NAME }}  # Remove the cloned repository to clean up the workspace